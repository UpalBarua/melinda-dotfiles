#!/usr/bin/env bash

# Ensure dependencies are available
command -v notify-send >/dev/null || { echo "notify-send is required but not installed."; exit 1; }
command -v nmcli >/dev/null || { echo "nmcli is required but not installed."; exit 1; }
command -v dmenu >/dev/null || { echo "dmenu is required but not installed."; exit 1; }

notify-send "Scanning for available Wi-Fi networks..."

# Get Wi-Fi status
wifi_status=$(nmcli -fields WIFI g | grep -q "enabled" && echo "睊 Disable Wi-Fi" || echo "直 Enable Wi-Fi")

# Get and format the list of available Wi-Fi networks
wifi_list=$(nmcli -fields SECURITY,SSID device wifi list | tail -n +2 | \
    awk '{sec=$1; $1=""; gsub(/^[[:space:]]+/, ""); printf "%s %s\n", (sec ~ /^WPA/) ? " " : " ", $0}')

# Present options in dmenu
chosen_network=$(echo -e "$wifi_status\n$wifi_list" | uniq | dmenu -i -p "Wi-Fi: " -l 10)
[ -z "$chosen_network" ] && exit

# Handle Wi-Fi toggle
if [[ "$chosen_network" == "直 Enable Wi-Fi" ]]; then
    nmcli radio wifi on && notify-send "Wi-Fi Enabled"
    exit
elif [[ "$chosen_network" == "睊 Disable Wi-Fi" ]]; then
    nmcli radio wifi off && notify-send "Wi-Fi Disabled"
    exit
fi

# Extract SSID
chosen_id="${chosen_network:3}"

# Check for saved connections
if nmcli -g NAME connection show | grep -qw "$chosen_id"; then
    nmcli connection up id "$chosen_id" && notify-send "Connected" "You are now connected to \"$chosen_id\"."
else
    # Prompt for password if secured
    if [[ "$chosen_network" =~ " " ]]; then
        wifi_password=$(dmenu -i -p "Password: ")
        [ -z "$wifi_password" ] && exit
    fi
    nmcli device wifi connect "$chosen_id" password "${wifi_password:-}" && \
        notify-send "Connected" "You are now connected to \"$chosen_id\"."
fi

